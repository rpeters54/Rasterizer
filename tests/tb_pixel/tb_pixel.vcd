$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module tb_pixel $end
  $var wire 1 P clk $end
  $var wire 1 Q rst_n $end
  $var wire 1 R rdy_out $end
  $var wire 1 S vld_in $end
  $scope module in_abs_pos $end
   $var wire 16 U x [15:0] $end
   $var wire 16 V y [15:0] $end
   $var wire 16 W z [15:0] $end
  $upscope $end
  $scope module in_delta_0 $end
   $var wire 16 X x [15:0] $end
   $var wire 16 Y y [15:0] $end
   $var wire 16 Z z [15:0] $end
  $upscope $end
  $scope module in_delta_1 $end
   $var wire 16 [ x [15:0] $end
   $var wire 16 \ y [15:0] $end
   $var wire 16 ] z [15:0] $end
  $upscope $end
  $scope module in_delta_2 $end
   $var wire 16 ^ x [15:0] $end
   $var wire 16 _ y [15:0] $end
   $var wire 16 ` z [15:0] $end
  $upscope $end
  $var wire 32 a in_edge_0 [31:0] $end
  $var wire 32 b in_edge_1 [31:0] $end
  $var wire 32 c in_edge_2 [31:0] $end
  $scope module in_metadata $end
   $var wire 8 d color [7:0] $end
   $var wire 6 e tile_x [5:0] $end
   $var wire 5 f tile_y [4:0] $end
  $upscope $end
  $var wire 16 g in_dzdx [15:0] $end
  $var wire 16 h in_dzdy [15:0] $end
  $var wire 32 i in_z_current [31:0] $end
  $var wire 1 # rdy_in $end
  $var wire 1 $ vld_out $end
  $var wire 8 % color_out [7:0] $end
  $scope module pixel_out $end
   $var wire 16 & x [15:0] $end
   $var wire 16 ' y [15:0] $end
  $upscope $end
  $var wire 32 j CLK_PERIOD [31:0] $end
  $scope module pixel_proc $end
   $var wire 1 P clk $end
   $var wire 1 Q rst_n $end
   $var wire 1 R rdy_out $end
   $var wire 1 S vld_in $end
   $scope module in_abs_pos $end
    $var wire 16 U x [15:0] $end
    $var wire 16 V y [15:0] $end
    $var wire 16 W z [15:0] $end
   $upscope $end
   $scope module in_delta_0 $end
    $var wire 16 X x [15:0] $end
    $var wire 16 Y y [15:0] $end
    $var wire 16 Z z [15:0] $end
   $upscope $end
   $scope module in_delta_1 $end
    $var wire 16 [ x [15:0] $end
    $var wire 16 \ y [15:0] $end
    $var wire 16 ] z [15:0] $end
   $upscope $end
   $scope module in_delta_2 $end
    $var wire 16 ^ x [15:0] $end
    $var wire 16 _ y [15:0] $end
    $var wire 16 ` z [15:0] $end
   $upscope $end
   $var wire 32 a in_edge_0 [31:0] $end
   $var wire 32 b in_edge_1 [31:0] $end
   $var wire 32 c in_edge_2 [31:0] $end
   $scope module in_metadata $end
    $var wire 8 d color [7:0] $end
    $var wire 6 e tile_x [5:0] $end
    $var wire 5 f tile_y [4:0] $end
   $upscope $end
   $var wire 16 g in_dzdx [15:0] $end
   $var wire 16 h in_dzdy [15:0] $end
   $var wire 32 i in_z_current [31:0] $end
   $var wire 1 # rdy_in $end
   $var wire 1 $ vld_out $end
   $var wire 8 % color_out [7:0] $end
   $scope module pixel_out $end
    $var wire 16 & x [15:0] $end
    $var wire 16 ' y [15:0] $end
   $upscope $end
   $var wire 32 ( present_state [31:0] $end
   $var wire 32 T next_state [31:0] $end
   $scope module abs_pos $end
    $var wire 16 ) x [15:0] $end
    $var wire 16 * y [15:0] $end
    $var wire 16 + z [15:0] $end
   $upscope $end
   $scope module flush_abs_pos $end
    $var wire 16 , x [15:0] $end
    $var wire 16 - y [15:0] $end
    $var wire 16 . z [15:0] $end
   $upscope $end
   $var wire 8 / rel_pos [7:0] $end
   $var wire 8 0 flush_rel_pos [7:0] $end
   $scope module deltas[0] $end
    $var wire 16 1 x [15:0] $end
    $var wire 16 2 y [15:0] $end
    $var wire 16 3 z [15:0] $end
   $upscope $end
   $scope module deltas[1] $end
    $var wire 16 4 x [15:0] $end
    $var wire 16 5 y [15:0] $end
    $var wire 16 6 z [15:0] $end
   $upscope $end
   $scope module deltas[2] $end
    $var wire 16 7 x [15:0] $end
    $var wire 16 8 y [15:0] $end
    $var wire 16 9 z [15:0] $end
   $upscope $end
   $var wire 32 : edges[0] [31:0] $end
   $var wire 32 ; edges[1] [31:0] $end
   $var wire 32 < edges[2] [31:0] $end
   $scope module metadata $end
    $var wire 8 = color [7:0] $end
    $var wire 6 > tile_x [5:0] $end
    $var wire 5 ? tile_y [4:0] $end
   $upscope $end
   $var wire 16 @ dzdx [15:0] $end
   $var wire 16 A dzdy [15:0] $end
   $var wire 32 B z_current [31:0] $end
   $scope module out_coord $end
    $var wire 16 C x [15:0] $end
    $var wire 16 D y [15:0] $end
   $upscope $end
   $var wire 11 E current_tile_coord [10:0] $end
   $var wire 11 k new_tile_coord [10:0] $end
   $scope module zero $end
    $var wire 16 l x [15:0] $end
    $var wire 16 l y [15:0] $end
    $var wire 16 l z [15:0] $end
   $upscope $end
   $var wire 32 F edge_row_offset__Vstatic__s_dy [31:0] $end
   $var wire 32 G edge_row_offset__Vstatic__s_dx [31:0] $end
   $var wire 32 H edge_column_offset__Vstatic__s_dy [31:0] $end
   $scope module tile_to_coord__Vstatic__out $end
    $var wire 16 I x [15:0] $end
    $var wire 16 J y [15:0] $end
    $var wire 16 K z [15:0] $end
   $upscope $end
   $scope module unnamedblk1 $end
    $var wire 32 L i [31:0] $end
   $upscope $end
   $scope module unnamedblk2 $end
    $var wire 32 M i [31:0] $end
   $upscope $end
   $scope module unnamedblk3 $end
    $var wire 32 N i [31:0] $end
   $upscope $end
   $scope module unnamedblk4 $end
    $var wire 32 O i [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
b00000000 %
b0000000000000000 &
b0000000000000000 '
b00000000000000000000000000000000 (
b0000000000000000 )
b0000000000000000 *
b0000000000000000 +
b0000000000000000 ,
b0000000000000000 -
b0000000000000000 .
b00000000 /
b00000000 0
b0000000000000000 1
b0000000000000000 2
b0000000000000000 3
b0000000000000000 4
b0000000000000000 5
b0000000000000000 6
b0000000000000000 7
b0000000000000000 8
b0000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000 =
b000000 >
b00000 ?
b0000000000000000 @
b0000000000000000 A
b00000000000000000000000000000000 B
b0000000000000000 C
b0000000000000000 D
b00000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b0000000000000000 I
b0000000000000000 J
b0000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
0P
0Q
0R
0S
b00000000000000000000000000000000 T
b0000000000000000 U
b0000000000000000 V
b0000000000000000 W
b0000000000000000 X
b0000000000000000 Y
b0000000000000000 Z
b0000000000000000 [
b0000000000000000 \
b0000000000000000 ]
b0000000000000000 ^
b0000000000000000 _
b0000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000 d
b000000 e
b00000 f
b0000000000000000 g
b0000000000000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000001010 j
b00000000000 k
b0000000000000000 l
#5000
1#
b00000000000000000000000000000011 L
b00000000000000000000000100000000 M
1P
#10000
0P
#15000
0#
1P
1Q
